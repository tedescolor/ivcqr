path = getwd() #set path to the folder empirical/
setwd(path)
setwd("~/Desktop/ReplicationPackage/Beyhum_Tedesco_Van_Keilegom/3 Replication package/empirical")
setwd(path)
test = FALSE
getwd()
~/Desktop/ReplicationPackage/Beyhum_Tedesco_Van_Keilegom/3 Replication package/empirical/create_plots.R
setwd("~/Desktop/ReplicationPackage/Beyhum_Tedesco_Van_Keilegom/3 Replication package/empirical")
data = read.csv("data.csv")
hist(data$days)
# Install and load required libraries
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
# Create a custom function to calculate the color of each bar
get_bar_colors <- function(times, deltas, breaks) {
# Create a data frame with the times and deltas
data <- data.frame(times = times, deltas = deltas)
# Calculate the range for each bin
bin_ranges <- cut(data$times, breaks = breaks, right = FALSE, include.lowest = TRUE)
# Calculate the proportion of censored data in each bin
bin_censored <- data %>%
mutate(bin = bin_ranges) %>%
group_by(bin) %>%
summarize(censored_proportion = mean(deltas == 0)) %>%
pull(censored_proportion)
# Calculate the color for each bin based on the proportion of censored data
bar_colors <- gray.colors(length(breaks) - 1, start = 1, end = 0)[match(bin_ranges, unique(bin_ranges))]
return(bar_colors)
}
# Define the times and deltas vectors
times <- c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
deltas <- c(1, 1, 0, 1, 0, 0, 1, 1, 1, 0)
# Define the number of breaks (bins) for the histogram
breaks <- 5
# Calculate the bar colors
bar_colors <- get_bar_colors(times, deltas, breaks)
# Create the histogram with the custom bar colors
hist(times, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
bar_colors
breaks
# Create a data frame with the times and deltas
data <- data.frame(times = times, deltas = deltas)
# Calculate the range for each bin
bin_ranges <- cut(data$times, breaks = breaks, right = FALSE, include.lowest = TRUE)
bin_ranges
# Calculate the proportion of censored data in each bin
bin_censored <- data %>%
mutate(bin = bin_ranges) %>%
group_by(bin) %>%
summarize(censored_proportion = mean(deltas)) %>%
pull(censored_proportion)
bin_censored
# Calculate the color for each bin based on the proportion of censored data
bar_colors <- gray.colors(length(breaks) - 1, start = 1, end = 0)[match(bin_ranges, unique(bin_ranges))]
bar_colors
gray.colors
gray.colors(length(breaks) - 1, start = 1, end = 0)
?gray.colors
length(breaks)
# Calculate the color for each bin based on the proportion of censored data
bar_colors <- gray.colors(breaks - 1, start = 1, end = 0)[match(bin_ranges, unique(bin_ranges))]
bar_colors
bin_ranges
bin_ranges
gray.colors(breaks - 1, start = 1, end = 0)
match(bin_ranges, unique(bin_ranges))
bin_censored
unique(bin_ranges)
gray.colors(1,start = 0.5)
gray.colors(1,start = 1)
gray.colors(1,start = 0)
# Calculate the color for each bin based on the proportion of censored data
bar_colors = sapply(bin_censored, function(value)gray.colors(1, start = value))
# Create a custom function to calculate the color of each bar
get_bar_colors <- function(times, deltas, breaks) {
# Create a data frame with the times and deltas
data <- data.frame(times = times, deltas = deltas)
# Calculate the range for each bin
bin_ranges <- cut(data$times, breaks = breaks, right = FALSE, include.lowest = TRUE)
# Calculate the proportion of censored data in each bin
bin_censored <- data %>%
mutate(bin = bin_ranges) %>%
group_by(bin) %>%
summarize(censored_proportion = mean(deltas)) %>%
pull(censored_proportion)
# Calculate the color for each bin based on the proportion of censored data
bar_colors = sapply(bin_censored, function(value)gray.colors(1, start = value))
#bar_colors <- gray.colors(breaks - 1, start = 1, end = 0)[match(bin_ranges, unique(bin_ranges))]
return(bar_colors)
}
# Define the times and deltas vectors
times <- c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
deltas <- c(1, 1, 0, 1, 0, 0, 1, 1, 1, 0)
# Define the number of breaks (bins) for the histogram
breaks <- 5
# Calculate the bar colors
bar_colors <- get_bar_colors(times, deltas, breaks)
# Create the histogram with the custom bar colors
hist(times, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
data = read.csv("data.csv")
# Install and load required libraries
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
# Create a custom function to calculate the color of each bar
get_bar_colors <- function(times, deltas, breaks) {
# Create a data frame with the times and deltas
aux <- data.frame(times = times, deltas = deltas)
# Calculate the range for each bin
bin_ranges <- cut(aux$times, breaks = breaks, right = FALSE, include.lowest = TRUE)
# Calculate the proportion of censored data in each bin
bin_censored <- aux %>%
mutate(bin = bin_ranges) %>%
group_by(bin) %>%
summarize(censored_proportion = mean(deltas)) %>%
pull(censored_proportion)
# Calculate the color for each bin based on the proportion of censored data
bar_colors = sapply(bin_censored, function(value)gray.colors(1, start = value))
#bar_colors <- gray.colors(breaks - 1, start = 1, end = 0)[match(bin_ranges, unique(bin_ranges))]
return(bar_colors)
}
# Define the number of breaks (bins) for the histogram
breaks <- 30
# Calculate the bar colors
bar_colors <- get_bar_colors(data$days, data$delta, breaks)
# Create the histogram with the custom bar colors
hist(times, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
# Define the number of breaks (bins) for the histogram
breaks <- 10
# Calculate the bar colors
bar_colors <- get_bar_colors(data$days, data$delta, breaks)
# Create the histogram with the custom bar colors
hist(times, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
# Define the number of breaks (bins) for the histogram
breaks <-20
# Calculate the bar colors
bar_colors <- get_bar_colors(data$days, data$delta, breaks)
# Create the histogram with the custom bar colors
hist(times, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
# Define the number of breaks (bins) for the histogram
breaks <-5
# Calculate the bar colors
bar_colors <- get_bar_colors(data$days, data$delta, breaks)
# Create the histogram with the custom bar colors
hist(times, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
# Define the number of breaks (bins) for the histogram
breaks <-5
# Define the number of breaks (bins) for the histogram
breaks <-30
# Calculate the bar colors
bar_colors <- get_bar_colors(data$days, data$delta, breaks)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
# Define the number of breaks (bins) for the histogram
breaks <-20
# Calculate the bar colors
bar_colors <- get_bar_colors(data$days, data$delta, breaks)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
# Define the number of breaks (bins) for the histogram
breaks <-15
# Calculate the bar colors
bar_colors <- get_bar_colors(data$days, data$delta, breaks)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
# Define the number of breaks (bins) for the histogram
breaks <-14
# Calculate the bar colors
bar_colors <- get_bar_colors(data$days, data$delta, breaks)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
# Define the number of breaks (bins) for the histogram
breaks <-15
# Calculate the bar colors
bar_colors <- get_bar_colors(data$days, data$delta, breaks)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Times", main = "Histogram with Censored Data")
png(filename="histogram.png",width = 800, height = 800)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Days", main = "")
dev.off()
png(filename="histogram.png",width = 600, height = 800)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Days", main = "")
dev.off()
png(filename="histogram.png",width = 800, height = 600)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Days", main = "")
dev.off()
png(filename="histogram.png",width = 800, height = 600)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Days", main = "",cex=4)
dev.off()
png(filename="histogram.png",width = 800, height = 600)
# Create the histogram with the custom bar colors
hist(data$days, breaks = breaks, col = bar_colors, xlab = "Days", main = "",cex.axis = 1.5, cex.lab = 1.5, cex.main = 2)
dev.off()
